{"version":3,"file":"index.esm.js","sources":["../src/format-number.ts"],"sourcesContent":["export function formatNumber(num: string | number): string {\n    if (num === null || num === undefined) {\n        return '0';\n    }\n\n    // Convertir a string\n    num = num.toString();\n\n    // Separar la parte entera y la parte decimal\n    const [integerPart, decimalPart] = num.split('.');\n\n    // Verificar si el número es negativo\n    const isNegative = integerPart.startsWith('-');\n    const absoluteIntegerPart = isNegative ? integerPart.substring(1) : integerPart;\n\n    // Invertir la parte entera\n    let reversedNum = absoluteIntegerPart.split('').reverse().join('');\n    let parts: string[] = [];\n\n    // Dividir en partes de tres dígitos\n    for (let i = 0; i < reversedNum.length; i += 3) {\n        parts.push(reversedNum.substring(i, i + 3));\n    }\n\n    // Volver a unir las partes y revertir de nuevo\n    let formattedNum = parts.map(part => part.split('').reverse().join('')).reverse().join('.');\n\n    // Añadir el signo negativo si es necesario\n    if (isNegative) {\n        formattedNum = '-' + formattedNum;\n    }\n\n    // Añadir la parte decimal si existe\n    if (decimalPart) {\n        formattedNum += ',' + decimalPart;\n    }\n\n    return formattedNum;\n}\n"],"names":["formatNumber","num","toString","integerPart","decimalPart","split","isNegative","startsWith","reversedNum","substring","reverse","join","parts","i","length","push","formattedNum","map","part"],"mappings":"AAAM,SAAUA,EAAaC,GACzB,GAAIA,QACA,MAAO,IAIXA,EAAMA,EAAIC,WAGV,MAAOC,EAAaC,GAAeH,EAAII,MAAM,KAGvCC,EAAaH,EAAYI,WAAW,KAI1C,IAAIC,GAHwBF,EAAaH,EAAYM,UAAU,GAAKN,GAG9BE,MAAM,IAAIK,UAAUC,KAAK,IAC3DC,EAAkB,GAGtB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAYM,OAAQD,GAAK,EACzCD,EAAMG,KAAKP,EAAYC,UAAUI,EAAGA,EAAI,IAI5C,IAAIG,EAAeJ,EAAMK,KAAIC,GAAQA,EAAKb,MAAM,IAAIK,UAAUC,KAAK,MAAKD,UAAUC,KAAK,KAYvF,OATIL,IACAU,EAAe,IAAMA,GAIrBZ,IACAY,GAAgB,IAAMZ,GAGnBY,CACX"}